# Multi-stage Dockerfile for optimized production builds
# Stage 1: Development base with testing dependencies
FROM python:3.12-slim as base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app"

WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development

# Install development dependencies (if we had dev requirements)
RUN pip install --no-cache-dir pytest-xvfb pytest-mock

# Copy source code
COPY . .

# Run tests in development
RUN python -m pytest tests/ -v

# Production stage - optimized and secure
FROM python:3.12-slim as production

LABEL maintainer="István Sári <isari@example.com>" \
      description="Random Toolbox - Production Microservice" \
      version="1.0.0"

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH="/app" \
    FLASK_APP=src.api.app \
    FLASK_ENV=production \
    PORT=5600

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Install only runtime system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt \
    && pip cache purge

# Copy only necessary application files
COPY src/ ./src/
COPY README.md LICENSE ./

# Create directories and set permissions
RUN mkdir -p /app/logs /app/tmp \
    && chown -R appuser:appuser /app

USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/api/v1/health || exit 1

EXPOSE ${PORT}

CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=5600"]